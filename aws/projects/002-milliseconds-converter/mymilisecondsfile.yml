AWSTemplateFormatVersion: 2010-09-09
Description: |
  The Milliseconds Converter Application aims to convert the given time in milliseconds into hours, 
  minutes, and seconds. The application is coded in Python and deployed as a web application with 
  Flask on AWS Application Load Balancer with Auto Scaling Group of Elastic Compute Cloud (EC2) Instances 
  using AWS Cloudformation Service.

Parameters:
  KeyName:
    Description: Enter the name of your Key Pair which will allow SSH connections to your instances.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must one of the existing EC2 KeyPair
  Subnets:
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  MyApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: Milisecond-LB
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt MyLoadBalancerSecurityGroup.GroupId
      Subnets: !Ref Subnets
      Tags:
        - Key: Name
          Value: Milisecond-LB
      Type: application

  MyALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: #required
        - Type: forward
          TargetGroupArn: !Ref MyALBTargetGroup
      LoadBalancerArn: !Ref MyApplicationLoadBalancer #required
      Port: 80 #required
      Protocol: HTTP #required

  MyALBTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Name: Target1
      Port: 80
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !GetAtt MyLoadBalancerSecurityGroup.VpcId

  MyAsLaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      ImageId: ami-0947d2ba12ee1ff75 #required
      InstanceType: t2.micro #required
      KeyName: !Ref KeyName
      LaunchConfigurationName: First-Launch-Config
      SecurityGroups:
        - !Ref MyInstanceSecurityGroup
      UserData: !Base64 |
        #!/bin/bash
        yum update -y
        yum install python3 -y
        pip3 install flask

        aws ec2 describe-subnets --no-paginate --filters "Name=default-for-az,Values=true" | egrep "(VpcId)|(SubnetId)"
        cd /home/ec2-user
        wget https://raw.githubusercontent.com/E2057SalihPoyraz/Salih-CW-aws-devops-workshop/master/aws/projects/002-milliseconds-converter/app.py
        mkdir templates
        cd templates
        wget https://raw.githubusercontent.com/E2057SalihPoyraz/Salih-CW-aws-devops-workshop/master/aws/projects/002-milliseconds-converter/templates/index.html
        wget https://raw.githubusercontent.com/E2057SalihPoyraz/Salih-CW-aws-devops-workshop/master/aws/projects/002-milliseconds-converter/templates/result.html
        cd ..
        python3 app.py
  
  MyAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: MyASGroup
      AvailabilityZones: !GetAZs 
      DesiredCapacity: '2'
      HealthCheckGracePeriod: 90
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref MyAsLaunchConfig
      MaxSize: '3' #required
      MinSize: '1' #required
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Sub Web Server of ${AWS::StackName} Stack
      TargetGroupARNs:
        - !Ref MyALBTargetGroup
  
  MyAutoScalingPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AutoScalingGroupName: !Ref MyAutoScalingGroup #required
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 60
  
  MyInstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Allows HTTP (80) connections only from the security group of ALB and SSH connections from anywhere. #required
      GroupName: MyInstanceSecGr
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22 
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80 
          ToPort: 80
          SourceSecurityGroupId: !GetAtt MyLoadBalancerSecurityGroup.GroupId
  
  MyLoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Allows HTTP (80) connections from anywhere #required
      GroupName: MyALBSecGr
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80 
          ToPort: 80
          CidrIp: 0.0.0.0/0  
  
Outputs:
  URL:
    Description: The URL of the website
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt MyApplicationLoadBalancer.DNSName