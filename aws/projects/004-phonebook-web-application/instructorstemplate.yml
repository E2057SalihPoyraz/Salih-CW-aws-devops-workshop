AWSTemplateFormatVersion: 2010-09-09
Description: |
  This CloudFormation Template for Phonebook Application creates Application Load Balancer 
  with Auto Scaling Group of Amazon Linux 2 (ami-026dea5602e368e96) EC2 Instances which host Python Flask Web Application.
  EC2 instances are placed within WebServerSecurityGroup which allows http (80) connections only from ALBSecurityGroup,
  and allows tcp(3306) connections only within itself. RDS DB instance is placed within WebServerSecurityGroup so that
  Database Server can communicate with Web Servers.
  Application Load Balancer is placed within ALBSecurityGroup which allows http (80) connections from anywhere.
  WebServerASG Auto Scaling Group is using the WebServerLT Launch Template in order to spin up instances needed.
  WebServerLT Launch Template is configured to prepare Python Flask environment on EC2,
  and to deploy Phonebook Application on Flask Server after downloading the app code from Github repository.
  
Resources:
  WebServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable HTTP for Flask Web Server and SSH for entering to EC2
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
  
  ALBSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable HTTP for Application Load Balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  
  WebServerLT:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateData:
        ImageId: ami-0947d2ba12ee1ff75
        InstanceType: t2.micro
        KeyName: flask02
        SecurityGroupIds:
          - !GetAtt WebServerSecurityGroup.GroupId
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub Web Server of ${AWS::StackName}
        UserData:
          Fn::Base64:
            !Sub 
              - |
                #! /bin/bash
                yum update -y
                yum install python3 -y
                pip3 install flask
                pip3 install flask_mysql
                echo "${MyDBURI}" > /home/ec2-user/dbserver.endpoint
                mkdir /home/ec2-user/website
                cd /home/ec2-user/website
                wget https://raw.githubusercontent.com/E2057SalihPoyraz/Salih-CW-aws-devops-workshop/master/aws/projects/004-phonebook-web-application/phonebook-app.py
                mkdir /home/ec2-user/website/templates
                cd /home/ec2-user/website/templates
                wget https://raw.githubusercontent.com/E2057SalihPoyraz/Salih-CW-aws-devops-workshop/master/aws/projects/004-phonebook-web-application/templates/index.html
                wget https://raw.githubusercontent.com/E2057SalihPoyraz/Salih-CW-aws-devops-workshop/master/aws/projects/004-phonebook-web-application/templates/delete.html
                wget https://raw.githubusercontent.com/E2057SalihPoyraz/Salih-CW-aws-devops-workshop/master/aws/projects/004-phonebook-web-application/templates/add-update.html
                cd ..
                python3 /home/ec2-user/website/phonebook-app.py
              - MyDBURI: !GetAtt MyDatabaseServer.Endpoint.Address
  
  WebServerTG:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 3
      HealthyThresholdCount: 2
      VpcId: !GetAtt WebServerSecurityGroup.VpcId
  
  ApplicationLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets:
        - subnet-4755250a
        - subnet-5f08a939
        - subnet-69a20f36
        - subnet-dc15e1ed
        - subnet-e59f05eb
        - subnet-f0933cd1
      Type: application
  
  ALBListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref WebServerTG
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  
  WebServerASG:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AvailabilityZones:
        !GetAZs 
      DesiredCapacity: 2
      HealthCheckGracePeriod: 90
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref WebServerLT
        Version: !GetAtt WebServerLT.LatestVersionNumber
      MaxSize: 3 
      MinSize: 1 
      TargetGroupARNs:
        - !Ref WebServerTG
  
  MyDBSecurityGroup:
    Type: "AWS::RDS::DBSecurityGroup"
    Properties:
      DBSecurityGroupIngress:
        - EC2SecurityGroupId: !GetAtt WebServerSecurityGroup.GroupId
      EC2VpcId: !GetAtt WebServerSecurityGroup.VpcId
      GroupDescription: Front-end access

  MyDatabaseServer:
    Type: "AWS::RDS::DBInstance"
    DeletionPolicy: Delete
    Properties:
      AllocatedStorage: 20
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true 
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: phonebook-app-dbc
      DBName: phonebook
      DBSecurityGroups:
        - !Ref MyDBSecurityGroup
      Engine: MySQL
      EngineVersion: 8.0.19
      MasterUserPassword: clarusway-1
      MasterUsername: admin
      MultiAZ: false
      Port: 3306
      PubliclyAccessible: true
  
Outputs:
  WebsiteURL:
    Value: !Sub
      - http://${ALBAddress}
      - ALBAddress: !GetAtt ApplicationLoadBalancer.DNSName
    Description: Phonebook Application Load Balancer URL